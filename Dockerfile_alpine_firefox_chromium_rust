FROM alpine:3.18.5

# install rust
RUN apk add --no-cache \
    ca-certificates \
    gcc

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=1.74.0

RUN set -eux; \
    apkArch="$(apk --print-arch)"; \
    case "$apkArch" in \
    x86_64) rustArch='x86_64-unknown-linux-musl'; rustupSha256='7aa9e2a380a9958fc1fc426a3323209b2c86181c6816640979580f62ff7d48d4' ;; \
    aarch64) rustArch='aarch64-unknown-linux-musl'; rustupSha256='b1962dfc18e1fd47d01341e6897cace67cddfabf547ef394e8883939bd6e002e' ;; \
    *) echo >&2 "unsupported architecture: $apkArch"; exit 1 ;; \
    esac; \
    url="https://static.rust-lang.org/rustup/archive/1.26.0/${rustArch}/rustup-init"; \
    wget "$url"; \
    echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version;



# for firefox and chromium


RUN echo @latest https://dl-cdn.alpinelinux.org/alpine/latest-stable/main >> /etc/apk/repositories &&  \
    echo @latest https://dl-cdn.alpinelinux.org/alpine/latest-stable/community >> /etc/apk/repositories && \
    # update of 3.19
    # echo @14.20.1 https://dl-cdn.alpinelinux.org/alpine/v3.14/main >> /etc/apk/repositories
    echo @14.20.1 https://dl-cdn.alpinelinux.org/alpine/v3.19/main >> /etc/apk/repositories

# Install dependencies
RUN apk --no-cache --update add libsrt@latest chromium@latest firefox@latest unzip
RUN apk --update --upgrade add chromium firefox chromium-chromedriver

# Set up Chromedriver Environment variables
ENV CHROMEDRIVER_VERSION 2.19
ENV CHROMEDRIVER_DIR /chromedriver
RUN mkdir $CHROMEDRIVER_DIR

# Download and install Chromedriver
RUN wget -q --continue -P $CHROMEDRIVER_DIR "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
RUN unzip $CHROMEDRIVER_DIR/chromedriver* -d $CHROMEDRIVER_DIR

# To get GeckoDriver running on Alpine
# FROM HERE
# https://stackoverflow.com/questions/58738920/running-geckodriver-in-an-alpine-docker-container
# Get all the prereqs
RUN set -eux; \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r1/glibc-2.35-r1.apk && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r1/glibc-bin-2.35-r1.apk && \
    apk add glibc-2.35-r1.apk && \
    apk add glibc-bin-2.35-r1.apk && \
    # And of course we need Firefox if we actually want to *use* GeckoDriver
    # apk add firefox-esr=60.9.0-r0 && \
    # Then install GeckoDriver
    wget https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz && \
    tar -zxf geckodriver-v0.33.0-linux64.tar.gz -C /usr/bin && \
    geckodriver --version

# RUN adduser -D -g users user
RUN adduser --disabled-password --gecos '' user
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
RUN mkdir -p /home/user 	&& chown user:users /home/user

RUN apk update 	&& \
    apk add --no-cache --update xvfb \
    x11vnc \
    fluxbox \
    xdpyinfo \
    st \
    vim \
    terminus-font \
    xterm \ 
    xeyes \
    htop \
    sudo \
    && sed -r -i "s/\[exec\] \(xterm\) \{xterm\}/\[exec\] \(st\) \{st -f 'xos4 Terminus-14'\}/" /usr/share/fluxbox/menu 	 \
    && mkdir -p /opt  \
    && rm -vrf /var/cache/apk/*

COPY bootstrap.sh /opt
COPY .docker/files/firefox/autoconfig.js /usr/lib/firefox/defaults/pref/autoconfig.js

USER user
ENV HOME /home/user
WORKDIR /home/user
CMD ["sh","/opt/bootstrap.sh"]


# docker build  --progress=plain --tag alpine-browser-rust:latest  -f Dockerfile_alpine_firefox_chromium_rust "."
# docker run --rm -it alpine-browser-rust:latest
#
# export DISPLAY=:0
# xhost +
# vncviewer $(docker inspect -f \
# '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps --format "{{.ID}}" | cut -d " " -f1))
#
# user root
# docker exec --user root -it 8918a9963841 /bin/ash
#
#run container 
#docker run --rm -it alpine-browser-rust:latest
# start vnc or shell